{
  "version": 3,
  "sources": ["../../@tauri-apps/api/helpers/tauri.js", "../../@tauri-apps/api/shell.js"],
  "sourcesContent": ["import { invoke } from '../tauri.js';\r\n\r\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/** @ignore */\r\nasync function invokeTauriCommand(command) {\r\n    return invoke('tauri', command);\r\n}\r\n\r\nexport { invokeTauriCommand };\r\n", "import { invokeTauriCommand } from './helpers/tauri.js';\r\nimport { transformCallback } from './tauri.js';\r\n\r\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * Access the system shell.\r\n * Allows you to spawn child processes and manage files and URLs using their default application.\r\n *\r\n * This package is also accessible with `window.__TAURI__.shell` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\r\n *\r\n * The APIs must be added to [`tauri.allowlist.shell`](https://tauri.app/v1/api/config/#allowlistconfig.shell) in `tauri.conf.json`:\r\n * ```json\r\n * {\r\n *   \"tauri\": {\r\n *     \"allowlist\": {\r\n *       \"shell\": {\r\n *         \"all\": true, // enable all shell APIs\r\n *         \"execute\": true, // enable process spawn APIs\r\n *         \"sidecar\": true, // enable spawning sidecars\r\n *         \"open\": true // enable opening files/URLs using the default program\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\r\n *\r\n * ## Security\r\n *\r\n * This API has a scope configuration that forces you to restrict the programs and arguments that can be used.\r\n *\r\n * ### Restricting access to the {@link open | `open`} API\r\n *\r\n * On the allowlist, `open: true` means that the {@link open} API can be used with any URL,\r\n * as the argument is validated with the `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+` regex.\r\n * You can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\r\n *\r\n * ### Restricting access to the {@link Command | `Command`} APIs\r\n *\r\n * The `shell` allowlist object has a `scope` field that defines an array of CLIs that can be used.\r\n * Each CLI is a configuration object `{ name: string, cmd: string, sidecar?: bool, args?: boolean | Arg[] }`.\r\n *\r\n * - `name`: the unique identifier of the command, passed to the {@link Command.constructor | Command constructor}.\r\n * If it's a sidecar, this must be the value defined on `tauri.conf.json > tauri > bundle > externalBin`.\r\n * - `cmd`: the program that is executed on this configuration. If it's a sidecar, this value is ignored.\r\n * - `sidecar`: whether the object configures a sidecar or a system program.\r\n * - `args`: the arguments that can be passed to the program. By default no arguments are allowed.\r\n *   - `true` means that any argument list is allowed.\r\n *   - `false` means that no arguments are allowed.\r\n *   - otherwise an array can be configured. Each item is either a string representing the fixed argument value\r\n *     or a `{ validator: string }` that defines a regex validating the argument value.\r\n *\r\n * #### Example scope configuration\r\n *\r\n * CLI: `git commit -m \"the commit message\"`\r\n *\r\n * Configuration:\r\n * ```json\r\n * {\r\n *   \"scope\": [\r\n *     {\r\n *       \"name\": \"run-git-commit\",\r\n *       \"cmd\": \"git\",\r\n *       \"args\": [\"commit\", \"-m\", { \"validator\": \"\\\\S+\" }]\r\n *     }\r\n *   ]\r\n * }\r\n * ```\r\n * Usage:\r\n * ```typescript\r\n * import { Command } from '@tauri-apps/api/shell'\r\n * new Command('run-git-commit', ['commit', '-m', 'the commit message'])\r\n * ```\r\n *\r\n * Trying to execute any API with a program not configured on the scope results in a promise rejection due to denied access.\r\n *\r\n * @module\r\n */\r\n/**\r\n * @since 1.0.0\r\n */\r\nclass EventEmitter {\r\n    constructor() {\r\n        /** @ignore */\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.eventListeners = Object.create(null);\r\n    }\r\n    /**\r\n     * Alias for `emitter.on(eventName, listener)`.\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    addListener(eventName, listener) {\r\n        return this.on(eventName, listener);\r\n    }\r\n    /**\r\n     * Alias for `emitter.off(eventName, listener)`.\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    removeListener(eventName, listener) {\r\n        return this.off(eventName, listener);\r\n    }\r\n    /**\r\n     * Adds the `listener` function to the end of the listeners array for the\r\n     * event named `eventName`. No checks are made to see if the `listener` has\r\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\r\n     * times.\r\n     *\r\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    on(eventName, listener) {\r\n        if (eventName in this.eventListeners) {\r\n            // eslint-disable-next-line security/detect-object-injection\r\n            this.eventListeners[eventName].push(listener);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line security/detect-object-injection\r\n            this.eventListeners[eventName] = [listener];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a **one-time**`listener` function for the event named `eventName`. The\r\n     * next time `eventName` is triggered, this listener is removed and then invoked.\r\n     *\r\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    once(eventName, listener) {\r\n        const wrapper = (...args) => {\r\n            this.removeListener(eventName, wrapper);\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            listener(...args);\r\n        };\r\n        return this.addListener(eventName, wrapper);\r\n    }\r\n    /**\r\n     * Removes the all specified listener from the listener array for the event eventName\r\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    off(eventName, listener) {\r\n        if (eventName in this.eventListeners) {\r\n            // eslint-disable-next-line security/detect-object-injection\r\n            this.eventListeners[eventName] = this.eventListeners[eventName].filter((l) => l !== listener);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes all listeners, or those of the specified eventName.\r\n     *\r\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    removeAllListeners(event) {\r\n        if (event) {\r\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete,security/detect-object-injection\r\n            delete this.eventListeners[event];\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            this.eventListeners = Object.create(null);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\r\n     * to each.\r\n     *\r\n     * @returns `true` if the event had listeners, `false` otherwise.\r\n     */\r\n    emit(eventName, ...args) {\r\n        if (eventName in this.eventListeners) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,security/detect-object-injection\r\n            const listeners = this.eventListeners[eventName];\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            for (const listener of listeners)\r\n                listener(...args);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Returns the number of listeners listening to the event named `eventName`.\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    listenerCount(eventName) {\r\n        if (eventName in this.eventListeners)\r\n            // eslint-disable-next-line security/detect-object-injection\r\n            return this.eventListeners[eventName].length;\r\n        return 0;\r\n    }\r\n    /**\r\n     * Adds the `listener` function to the _beginning_ of the listeners array for the\r\n     * event named `eventName`. No checks are made to see if the `listener` has\r\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\r\n     * times.\r\n     *\r\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    prependListener(eventName, listener) {\r\n        if (eventName in this.eventListeners) {\r\n            // eslint-disable-next-line security/detect-object-injection\r\n            this.eventListeners[eventName].unshift(listener);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line security/detect-object-injection\r\n            this.eventListeners[eventName] = [listener];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\r\n     * listener is removed, and then invoked.\r\n     *\r\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    prependOnceListener(eventName, listener) {\r\n        const wrapper = (...args) => {\r\n            this.removeListener(eventName, wrapper);\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            listener(...args);\r\n        };\r\n        return this.prependListener(eventName, wrapper);\r\n    }\r\n}\r\n/**\r\n * @since 1.1.0\r\n */\r\nclass Child {\r\n    constructor(pid) {\r\n        this.pid = pid;\r\n    }\r\n    /**\r\n     * Writes `data` to the `stdin`.\r\n     *\r\n     * @param data The message to write, either a string or a byte array.\r\n     * @example\r\n     * ```typescript\r\n     * import { Command } from '@tauri-apps/api/shell';\r\n     * const command = new Command('node');\r\n     * const child = await command.spawn();\r\n     * await child.write('message');\r\n     * await child.write([0, 1, 2, 3, 4, 5]);\r\n     * ```\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async write(data) {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Shell',\r\n            message: {\r\n                cmd: 'stdinWrite',\r\n                pid: this.pid,\r\n                // correctly serialize Uint8Arrays\r\n                buffer: typeof data === 'string' ? data : Array.from(data)\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Kills the child process.\r\n     *\r\n     * @returns A promise indicating the success or failure of the operation.\r\n     */\r\n    async kill() {\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Shell',\r\n            message: {\r\n                cmd: 'killChild',\r\n                pid: this.pid\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * The entry point for spawning child processes.\r\n * It emits the `close` and `error` events.\r\n * @example\r\n * ```typescript\r\n * import { Command } from '@tauri-apps/api/shell';\r\n * const command = new Command('node');\r\n * command.on('close', data => {\r\n *   console.log(`command finished with code ${data.code} and signal ${data.signal}`)\r\n * });\r\n * command.on('error', error => console.error(`command error: \"${error}\"`));\r\n * command.stdout.on('data', line => console.log(`command stdout: \"${line}\"`));\r\n * command.stderr.on('data', line => console.log(`command stderr: \"${line}\"`));\r\n *\r\n * const child = await command.spawn();\r\n * console.log('pid:', child.pid);\r\n * ```\r\n *\r\n * @since 1.1.0\r\n *\r\n */\r\nclass Command extends EventEmitter {\r\n    /**\r\n     * Creates a new `Command` instance.\r\n     *\r\n     * @param program The program name to execute.\r\n     * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\r\n     * @param args Program arguments.\r\n     * @param options Spawn options.\r\n     */\r\n    constructor(program, args = [], options) {\r\n        super();\r\n        /** Event emitter for the `stdout`. Emits the `data` event. */\r\n        this.stdout = new EventEmitter();\r\n        /** Event emitter for the `stderr`. Emits the `data` event. */\r\n        this.stderr = new EventEmitter();\r\n        this.program = program;\r\n        this.args = typeof args === 'string' ? [args] : args;\r\n        this.options = options !== null && options !== void 0 ? options : {};\r\n    }\r\n    /**\r\n     * Creates a command to execute the given sidecar program.\r\n     * @example\r\n     * ```typescript\r\n     * import { Command } from '@tauri-apps/api/shell';\r\n     * const command = Command.sidecar('my-sidecar');\r\n     * const output = await command.execute();\r\n     * ```\r\n     *\r\n     * @param program The program to execute.\r\n     * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\r\n     */\r\n    static sidecar(program, args = [], options) {\r\n        const instance = new Command(program, args, options);\r\n        instance.options.sidecar = true;\r\n        return instance;\r\n    }\r\n    /**\r\n     * Executes the command as a child process, returning a handle to it.\r\n     *\r\n     * @returns A promise resolving to the child process handle.\r\n     */\r\n    async spawn() {\r\n        const program = this.program;\r\n        const args = this.args;\r\n        const options = this.options;\r\n        if (typeof args === 'object') {\r\n            Object.freeze(args);\r\n        }\r\n        const onEvent = (event) => {\r\n            switch (event.event) {\r\n                case 'Error':\r\n                    this.emit('error', event.payload);\r\n                    break;\r\n                case 'Terminated':\r\n                    this.emit('close', event.payload);\r\n                    break;\r\n                case 'Stdout':\r\n                    this.stdout.emit('data', event.payload);\r\n                    break;\r\n                case 'Stderr':\r\n                    this.stderr.emit('data', event.payload);\r\n                    break;\r\n            }\r\n        };\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Shell',\r\n            message: {\r\n                cmd: 'execute',\r\n                program,\r\n                args,\r\n                options,\r\n                onEventFn: transformCallback(onEvent)\r\n            }\r\n        }).then((pid) => new Child(pid));\r\n    }\r\n    /**\r\n     * Executes the command as a child process, waiting for it to finish and collecting all of its output.\r\n     * @example\r\n     * ```typescript\r\n     * import { Command } from '@tauri-apps/api/shell';\r\n     * const output = await new Command('echo', 'message').execute();\r\n     * assert(output.code === 0);\r\n     * assert(output.signal === null);\r\n     * assert(output.stdout === 'message');\r\n     * assert(output.stderr === '');\r\n     * ```\r\n     *\r\n     * @returns A promise resolving to the child process output.\r\n     */\r\n    async execute() {\r\n        const program = this.program;\r\n        const args = this.args;\r\n        const options = this.options;\r\n        if (typeof args === 'object') {\r\n            Object.freeze(args);\r\n        }\r\n        return invokeTauriCommand({\r\n            __tauriModule: 'Shell',\r\n            message: {\r\n                cmd: 'executeAndReturn',\r\n                program,\r\n                args,\r\n                options\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Opens a path or URL with the system's default app,\r\n * or the one specified with `openWith`.\r\n *\r\n * The `openWith` value must be one of `firefox`, `google chrome`, `chromium` `safari`,\r\n * `open`, `start`, `xdg-open`, `gio`, `gnome-open`, `kde-open` or `wslview`.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { open } from '@tauri-apps/api/shell';\r\n * // opens the given URL on the default browser:\r\n * await open('https://github.com/tauri-apps/tauri');\r\n * // opens the given URL using `firefox`:\r\n * await open('https://github.com/tauri-apps/tauri', 'firefox');\r\n * // opens a file using the default program:\r\n * await open('/path/to/file');\r\n * ```\r\n *\r\n * @param path The path or URL to open.\r\n * This value is matched against the string regex defined on `tauri.conf.json > tauri > allowlist > shell > open`,\r\n * which defaults to `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+`.\r\n * @param openWith The app to open the file or URL with.\r\n * Defaults to the system default application for the specified path type.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function open(path, openWith) {\r\n    return invokeTauriCommand({\r\n        __tauriModule: 'Shell',\r\n        message: {\r\n            cmd: 'open',\r\n            path,\r\n            with: openWith\r\n        }\r\n    });\r\n}\r\n\r\nexport { Child, Command, EventEmitter, open };\r\n"],
  "mappings": "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",
  "names": []
}
